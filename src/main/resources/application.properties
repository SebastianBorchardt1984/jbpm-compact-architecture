# Packaging
#quarkus.package.type=fast-jar

#https://quarkus.io/guides/openapi-swaggerui
quarkus.http.cors=true
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.swagger-ui.always-include=true
quarkus.kogito.data-index.graphql.ui.always-include=true
quarkus.http.test-port=0
quarkus.devservices.enabled=false


api.key=your-secret-key
quarkus.datasource.crm.db-kind=other
quarkus.datasource.crm.username=SYSTEM
quarkus.datasource.crm.password=HXEHana1
quarkus.datasource.crm.jdbc.url=jdbc:sap://localhost:39017/?databaseName=SYSTEMDB&reconnect=true&statementCacheSize=512
quarkus.datasource.crm.jdbc.driver=com.sap.db.jdbc.Driver
quarkus.datasource.crm.jdbc=true
timer.period=200000
#camel.main.routes-include-pattern=routes/*.yaml

#############################
# 1) In-Memory-Eventing
#############################


# Kogito Knative integration
org.kie.kogito.addons.knative.eventing.generate-kogito-source=true
#kogito.messaging.as-cloudevents=false

mp.messaging.incoming.kogito_incoming_stream.connector=quarkus-http
mp.messaging.incoming.kogito_incoming_stream.path=/
mp.messaging.incoming.my-signal2.connector=quarkus-http
mp.messaging.incoming.my-signal2.path=/my-signal2
mp.messaging.incoming.my-signal2.http.method=POST

# BPMN-Message "myMessage" -> Channel "myMessage"
#kogito.messaging.incoming.myMessage=myMessage
mp.messaging.incoming.myMessage.connector=smallrye-camel
mp.messaging.incoming.myMessage.endpoint-uri=reactive-streams:myMessage



# 2) SmallRye: Der Channel "myMessage2" nutzt den Camel-Connector, aber in "outgoing"-Richtung
mp.messaging.incoming.von-camel.connector=smallrye-camel
mp.messaging.incoming.von-camel.endpoint-uri=reactive-streams:von-camel


mp.messaging.outgoing.an-camel.connector=smallrye-camel
mp.messaging.outgoing.an-camel.endpoint-uri=reactive-streams:an-camel



# Optional (je nach SmallRye/Kogito-Version):
# mp.messaging.incoming.myMessage.cloud-events=structured
# oder "enabled"

# Kogito-service
kogito.service.url=http://localhost:8080

#Job-service
kogito.jobs-service.url=http://localhost:8080
kogito.dataindex.http.url=http://localhost:8080

# run create tables scripts
quarkus.flyway.migrate-at-start=true
quarkus.flyway.baseline-on-migrate=true
quarkus.flyway.baseline-version=0.0
quarkus.flyway.locations=classpath:/db/migration,classpath:/db/jobs-service,classpath:/db/data-audit/postgresql
quarkus.flyway.table=FLYWAY_RUNTIME_SERVICE


kogito.persistence.type=jdbc
quarkus.datasource.db-kind=postgresql
#%prod.quarkus.datasource.username=kogito-user
#%prod.quarkus.datasource.password=kogito-pass
#%prod.quarkus.datasource.jdbc.url=${QUARKUS_DATASOURCE_JDBC_URL:jdbc:postgresql://localhost:5432/kogito}
#%prod.quarkus.datasource.reactive.url=${QUARKUS_DATASOURCE_REACTIVE_URL:postgresql://localhost:5432/kogito}

quarkus.datasource.username=kogito-user
quarkus.datasource.password=kogito-pass
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/kogito
quarkus.datasource.reactive.url=postgresql://localhost:5432/kogito

quarkus.native.native-image-xmx=8g

# profile to pack this example into a container, to use it execute activate the maven container profile, -Pcontainer
%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=${USER}
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=${project.version}
%container.quarkus.container-image.name=jbpm-compact-architecture-example-service

%dev.jbpm.devui.users.jdoe.groups=admin,HR,IT

# Disabling OIDC
quarkus.oidc.enabled=false